name: Run test suite

on:
  workflow_call:
    inputs:
      platform:
        required: true
        type: string

      badge:
        required: true
        type: string

jobs:
  testing:
    permissions:
      actions: write

    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install platform
        run: |
          New-Item -ItemType "directory" -Path "$env:USERPROFILE\Arduino"
          New-Item -ItemType "directory" -Path "$env:LOCALAPPDATA\Arduino15\libraries"

          arduino-cli config init
          arduino-cli config add board_manager.additional_urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli config add board_manager.additional_urls https://drazzy.com/package_drazzy.com_index.json
          arduino-cli config add board_manager.additional_urls https://github.com/stm32duino/BoardManagerFiles/raw/main/package_stmicroelectronics_index.json
          arduino-cli config set directories.builtin.libraries "$env:LOCALAPPDATA\Arduino15\libraries"
          arduino-cli config set directories.user "$env:USERPROFILE\Arduino"
          arduino-cli config dump

          arduino-cli core update-index
          arduino-cli core install ${{ inputs.platform }}

      - name: Install Ninja
        id: ninja
        run: |
            $releaseUrl = "https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-win.zip"
            $expectedHash = "F550FEC705B6D6FF58F2DB3C374C2277A37691678D6ABA463ADCBB129108467A"

            Invoke-WebRequest -Uri $releaseUrl -OutFile ninja.zip
            Expand-Archive -Path ninja.zip -DestinationPath ninja

            $actualHash = (Get-FileHash -Path ninja.zip -Algorithm SHA256).Hash
            if ($actualHash -ne $expectedHash) { exit 1 }

            echo "PATH=$PWD/ninja;$env:PATH" >> $env:GITHUB_ENV

      - name: Configure test suite
        run: |
          mkdir test
          cd test
          cmake -G Ninja ..

      - name: Run the test suite
        run: |
          ctest `
            --build-config Debug --test-dir test `
            --parallel --verbose --label-regex "^${{ inputs.platform }}:" `
            --output-junit test-results.xml

      - name: Produce test summary
        uses: test-summary/action@v2
        if:   always()
        with:
          paths: "**/test-results.xml"

      - name: Prepare upload of build artifacts
        if:   always()
        run: |
          echo "platform=${{ inputs.platform }}".replace(":", "-") >> $env:GITHUB_ENV

      - name: Upload generated binaries
        uses: actions/upload-artifact@v4
        if:   always()
        with:
          name: binaries-${{ env.platform }}
          path: |
            test/**/*.elf
            test/**/*.bin
            test/**/*.hex

      - name: Update status badge
        if:   always()
        run: |
          $payload = @"
          {
            "ref": "${{ github.ref }}",
            "inputs": { "status": "${{ job.status }}" }
          }
          "@

          $token = ConvertTo-SecureString "${{ secrets.GITHUB_TOKEN }}" -AsPlainText -Force

          $response = Invoke-WebRequest `
            -Uri "https://api.github.com/repos/${{ github.repository }}/actions/workflows/badge-${{ inputs.badge }}.yml/dispatches" `
            -Method "POST" -Body $payload -ContentType "application/json" `
            -Authentication "Bearer" -Token $token

          if ($response.StatusCode -ne 204) {
            echo "The REST call to update the badge has failed."
            exit 1
          } elseif ("${{ job.status }}" -eq "failure") {
            echo "The test suite has failed."
            exit 1
          } else {
            echo "The test suite succeeded."
          }
